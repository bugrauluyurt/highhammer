name: build

on:
  workflow_dispatch:
    inputs:
      apps:
        description: 'Apps: (Write a list of apps to build. Ex: ["client-app", "api-core"]). Empty array creates images for all services.'
        default: '[]'
        required: true

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  ACR_ENDPOINT: ${{ secrets.ACR_ENDPOINT }}
  ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
  ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
  NX_CLOUD_AUTH_TOKEN: ${{ secrets.NX_CLOUD_AUTH_TOKEN }}
  NX_BRANCH: ${{ github.head_ref || github.ref_name }}

jobs:
  set-inputs:
    runs-on: ubuntu-latest
    steps:
      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v6
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_WORKFLOW_TOKEN }}
          fetch-depth: 0
      - name: Pull changes
        run: |
          git pull origin ${{ steps.branch-name.outputs.current_branch }}
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: "18.13.0"
      - name: Generate inputs
        id: generate-inputs
        run: |
          # INPUT -> Apps
          echo "apps=$(node tools/dev-scripts/cmd-get-build-projects.js '${{inputs.apps}}')" >> $GITHUB_OUTPUT

          # INPUT -> Tag
          echo "tag=$(git describe --abbrev=0 --tags | tr -d v)" >> $GITHUB_OUTPUT

          # INPUT - Sha
          echo "sha=$(git rev-parse "$GITHUB_SHA")" >> $GITHUB_OUTPUT

          # INPUT - Branch
          echo "branch=${{ github.head_ref || github.ref_name }}" >> $GITHUB_OUTPUT
      - name: Print inputs
        run: |
          echo "APPS: ${{ steps.generate-inputs.outputs.apps }}"
          echo "SHA: ${{ steps.generate-inputs.outputs.sha }}"
          echo "BRANCH: ${{ steps.generate-inputs.outputs.branch }}"
          echo "TAG: ${{ steps.generate-inputs.outputs.tag }}"
    outputs:
      apps: ${{ steps.generate-inputs.outputs.apps }}
      sha: ${{ steps.generate-inputs.outputs.sha }}
      branch: ${{ steps.generate-inputs.outputs.branch }}
      tag: ${{ steps.generate-inputs.outputs.tag }}
  build:
    runs-on: ubuntu-latest
    needs: [set-inputs]
    if: ${{ fromJson(needs.set-inputs.outputs.apps)[0] }}
    strategy:
      max-parallel: 4
      matrix:
        node: ["18.13.0"]
        projectName: ${{fromJson(needs.set-inputs.outputs.apps)}}
    env:
      NODE: ${{ matrix.node }}
    steps:
      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v6
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_WORKFLOW_TOKEN }}
      - name: Setup git
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
      - name: Install pnpm
        uses: pnpm/action-setup@v2.2.4
        with:
          version: "7.x"
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install
      - name: Build
        run: |
          pnpm nx run ${{ matrix.projectName }}:build
          rm -rf ./apps/${{matrix.projectName}}/dist
          cp -r ./dist/apps/${{matrix.projectName}}/ ./apps/${{matrix.projectName}}/dist/
      - name: Version monorepo
        id: version-monorepo
        run: |
          VERSION="$(git tag --points-at ${{needs.set-inputs.outputs.sha}})"

          if [[ $VERSION == "" ]]; then
            VERSION="${{needs.set-inputs.outputs.tag}}"
          fi

          # If there is still no version set the version to sha
          if [[ $VERSION == "" ]]; then
            VERSION="${{needs.set-inputs.outputs.sha}}"
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
      - name: Version project
        id: version-project
        run: |
          VERSION_PROJECT="$(node tools/dev-scripts/cmd-generate-calver.js '${{matrix.projectName}}')"
          VERSION_MONOREPO="${{steps.version-monorepo.outputs.version}}"
          CURRENT_BRANCH="${{ steps.branch-name.outputs.current_branch }}"

          # Set the project version
          echo "version=$VERSION_PROJECT" >> $GITHUB_OUTPUT

          # Checkout to head after each commit.
          git checkout $CURRENT_BRANCH
          git pull origin $CURRENT_BRANCH

          # Bump the project version inside the package.json and push it without triggering the CI.
          node tools/dev-scripts/cmd-bump-project-version.js '${{matrix.projectName}}' $VERSION_PROJECT

          # Send it via git
          # git add -A
          # git commit -m "version(:rocket:): ${{matrix.projectName}} -> $VERSION_MONOREPO-$VERSION_PROJECT [skip ci][skip release]"
          # git push origin $CURRENT_BRANCH
      - name: Package
        run: |
          IMAGE_NAME="${{matrix.projectName}}"
          VERSION_PROJECT="${{steps.version-project.outputs.version}}"
          VERSION_MONOREPO="${{steps.version-monorepo.outputs.version}}"
          CONTAINER_TAG="$ACR_ENDPOINT/$IMAGE_NAME:$VERSION_MONOREPO"

          # - Docker login
          echo $ACR_PASSWORD | docker login $ACR_ENDPOINT -u $ACR_USERNAME --password-stdin
          # - Docker build
          docker build -t $CONTAINER_TAG -f ./apps/${{matrix.projectName}}/Dockerfile ./apps/${{matrix.projectName}}
          # - Docker push
          docker push $CONTAINER_TAG
