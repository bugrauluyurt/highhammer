name: build

on:
  workflow_dispatch:
    inputs:
      # Sha: Git sha. If not provided the system will default to the HEAD of the branch
      sha:
        description: 'Sha: Commit sha to build from.'
        required: false
      apps:
        description: 'Apps: (Write a list of apps to build. Ex: ["client-app", "api-core"]). Empty array creates images for all services.'
        default: '[]'
        required: false

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NX_CLOUD_AUTH_TOKEN: ${{ secrets.NX_CLOUD_AUTH_TOKEN }}

jobs:
  set-inputs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16.17.0"
      - name: Generate inputs
        id: generate-inputs
        run: |
          # INPUT -> Apps
          echo "apps=$(node tools/dev-scripts/cmd-get-build-projects.js '${{inputs.apps}}')" >> $GITHUB_OUTPUT

          # INPUT - Sha
          if [[ "${{inputs.sha}}" == "" ]]; then
            echo "sha=$(git rev-parse --short "$GITHUB_SHA")" >> $GITHUB_OUTPUT
          else
            echo "sha=${{ inputs.sha }}" >> $GITHUB_OUTPUT
          fi

          # INPUT - Branch
          echo "branch=${{ github.head_ref || github.ref_name }}" >> $GITHUB_OUTPUT
      - name: Print inputs
        run: |
          echo "APPS: ${{ steps.generate-inputs.outputs.apps }}"
          echo "SHA: ${{ steps.generate-inputs.outputs.sha }}"
          echo "BRANCH: ${{ steps.generate-inputs.outputs.branch }}"
    outputs:
      apps: ${{ steps.generate-inputs.outputs.apps }}
      sha: ${{ steps.generate-inputs.outputs.sha }}
      branch: ${{ steps.generate-inputs.outputs.branch }}
  build:
    runs-on: ubuntu-latest
    needs: [set-inputs]
    if: ${{ fromJson(needs.set-inputs.outputs.apps)[0] }}
    strategy:
      max-parallel: 4
      matrix:
        node: ["16.17.0"]
        projectName: ${{fromJson(needs.set-inputs.outputs.apps)}}
    env:
      NODE: ${{ matrix.node }}
    steps:
      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v6
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install pnpm
        uses: pnpm/action-setup@v2.2.4
        with:
          version: "7.x"
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install
      - name: Build
        run: |
          git checkout ${{needs.set-inputs.outputs.sha}}
          pnpm nx run ${{ matrix.projectName }}:build
      - name: Package
        run: |
          VERSION="$(git tag --points-at ${{needs.set-inputs.outputs.sha}})"
          TIME="$(date +'%Y%m%d%H%M')"

          if [[ $VERSION == "" ]]; then
            VERSION="$TIME-${{needs.set-inputs.outputs.sha}}"
          fi

          rm -rf ./apps/${{matrix.projectName}}/dist

          # @INFO: For now skip the api-worker build, since it is not being used. Skipping is done inside the 'cmd-get-build-projects.js' script
          cp -r ./dist/apps/${{matrix.projectName}}/ ./apps/${{matrix.projectName}}/dist/

          # @TODO: System should use the ACR docker cache for faster builds
          docker build -t ${{github.event.repository.name}}/${{matrix.projectName}}:$VERSION -f ./apps/${{matrix.projectName}}/Dockerfile ./apps/${{matrix.projectName}}
